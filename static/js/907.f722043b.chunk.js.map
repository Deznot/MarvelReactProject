{"version":3,"file":"static/js/907.f722043b.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error,errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage /> \r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import img from \"./error.gif\";\r\n//если необходимо достать что либо из папки public process.env.PUBLIC_URL + 'error.gif'\r\nconst ErrorMessage = () => {  \r\n    return (\r\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"error\" />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppBanner;","import \"./comicsList.scss\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\n\r\nconst ComicsList = () => {\r\n    const [comics, setComics] = useState([]);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const { loading, error, getAllComics,process,setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n            .then(setProcess('loaded'));\r\n    }\r\n\r\n    const onComicsListLoaded = (newComics) => {\r\n        let ended = false;\r\n        if (newComics.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComics((comics) => [...comics, ...newComics]);\r\n        setOffset((offset) => offset + 8);\r\n        setNewItemLoading(false);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    const renderComics = (comicsList) => {\r\n        let comList = comicsList.map((item, i) => {\r\n            const objectFit = (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") ? \"unset\" : \"cover\";\r\n            return (\r\n                <CSSTransition \r\n                    classNames=\"comics__item\"\r\n                    key={item.id + i}\r\n                    timeout={500}\r\n                >\r\n                    <li key={item.id + i} className=\"comics__item\">\r\n                        <Link to={`${item.id}`}>\r\n                            <img className=\"comics__item-img\" src={item.thumbnail} alt={item.title} style={{ objectFit: objectFit }} />\r\n                            <div className=\"comics__item-title\">\r\n                                {item.title}\r\n                            </div>\r\n                            <div className=\"comics__item-price\">\r\n                                {item.price}\r\n                            </div>\r\n                        </Link>\r\n                    </li>\r\n                </CSSTransition>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {comList}\r\n                </TransitionGroup>\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const rendComics = renderComics(comics);\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {rendComics}\r\n            <button\r\n                disabled={newItemLoading}\r\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">LOAD MORE</div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"../../style/button.scss\";\r\n\r\nconst ComicsPage = () => {\r\n    // let location = useLocation(); show current route \r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with List of comics\" />\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ErrorBoundary>\r\n                <ComicsList />\r\n            </ErrorBoundary>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            setLoading(false);\r\n            return await response.json();\r\n        } catch (e) {\r\n            setProcess(\"error\");\r\n            setError(e.message);\r\n            setLoading(false);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('waiting');\r\n    }, []);\r\n\r\n    return {\r\n        loading,\r\n        request,\r\n        error,\r\n        clearError,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\nexport default useHttp;\r\n","import useHttp from \"../components/hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = \"apikey=d24cd74b8f784e74321942586e80d036\";\r\n    const _apiCharOffset = 0;\r\n    const { loading, request, error, clearError, setProcess, process } = useHttp();\r\n\r\n    const getAllCharacters = async (charOffset = _apiCharOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${charOffset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        let res = await request(`${_apiBase}/characters/${id}?${_apiKey}`);\r\n        return _transformCharacterData(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (ComicsOffset = 0) => {\r\n        let res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${ComicsOffset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}/characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const _transformCharacterData = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'Data about character is not found',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        request,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComics,\r\n        getCharacterByName,\r\n        setProcess,\r\n        process\r\n    }\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","style","display","width","height","objectFit","margin","src","img","alt","_jsxs","className","avengers","avengersLogo","_useState","useState","_useState2","_slicedToArray","comics","setComics","_useState3","_useState4","offset","setOffset","_useState5","_useState6","comicsEnded","setComicsEnded","_useState7","_useState8","newItemLoading","setNewItemLoading","_useMarvelService","useMarvelService","loading","getAllComics","setProcess","process","useEffect","onRequest","initial","then","onComicsListLoaded","newComics","ended","_toConsumableArray","spinner","Spinner","errorMessage","rendComics","comicsList","comList","map","item","i","thumbnail","CSSTransition","classNames","timeout","Link","to","id","title","price","TransitionGroup","component","renderComics","disabled","onClick","_Fragment","Helmet","name","content","AppBanner","ComicsList","setLoading","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","clearError","_apiBase","_apiKey","_useHttp","useHttp","getAllCharacters","charOffset","res","data","results","_transformCharacterData","getCharacter","_ref2","_callee2","_context2","_ref3","_callee3","ComicsOffset","_args3","_context3","_transformComics","getComics","_ref4","_callee4","_context4","_x2","getCharacterByName","_ref5","_callee5","_context5","_x3","char","description","slice","path","extension","homepage","urls","wiki","items","_comics$textObjects$","pageCount","language","textObjects","prices"],"sourceRoot":""}