{"version":3,"file":"static/js/511.11111ab2.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","utils/setContent.js","components/charList/CharList.js","components/selectChar/SelectChar.js","components/charInfo/CharInfo.js","components/findCharacter/FindCharacter.js","components/pages/MainPage.js","components/hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error,errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage /> \r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import img from \"./error.gif\";\r\n//если необходимо достать что либо из папки public process.env.PUBLIC_URL + 'error.gif'\r\nconst ErrorMessage = () => {  \r\n    return (\r\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"error\" />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\r\nimport \"./randomChar.scss\";\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport \"../../style/button.scss\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst RandomChar = (props) => {\r\n    const [char, setChar] = useState({});\r\n    const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = async () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const onClickButtonTry = () => {\r\n        return updateChar();\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || errorMessage || !char) ? <View char={char} /> : null;\r\n\r\n    return (\r\n        <div className=\"randomChar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomChar__another\">\r\n                <p className=\"randomChar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomChar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={onClickButtonTry} className=\"button button__main\">\r\n                    <div className=\"inner\">TRY IT</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"random character decoration\" className=\"randomChar__decoration\" />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n    const { thumbnail, name, description, homepage, wiki } = char;\r\n    let objectFit = 'cover';\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        objectFit = 'contain';\r\n    }\r\n    return (\r\n        <div className=\"randomChar__block\">\r\n            <img src={thumbnail} alt=\"thumbnail\" style={{ objectFit: objectFit }} />\r\n            <div className=\"randomChar__info\">\r\n                <p className=\"randomChar__title\">{name}</p>\r\n                <p className=\"randomChar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomChar__buttons\">\r\n                    <a href={homepage} className=\"button button__main\"><div className=\"inner\">HOMEPAGE</div></a>\r\n                    <a href={wiki} className=\"button button__secondary\"><div className=\"inner\">WIKI</div></a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomChar;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\nconst setContent = ({ process, Component, data, WaitingComponent, waitingData = null, LoadingComponent}) => {\r\n    if (LoadingComponent === 'spinner') {\r\n        LoadingComponent = Spinner;\r\n    }\r\n\r\n    switch (process) {\r\n        case \"waiting\":\r\n            return WaitingComponent ? <WaitingComponent data={waitingData} /> : null;\r\n        case \"loading\":\r\n            return LoadingComponent? <LoadingComponent/> : null;\r\n        case \"loaded\":\r\n            return <Component data={data} />\r\n        case \"error\":\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process');\r\n    }\r\n}\r\n\r\nexport default setContent;","import { useState, useEffect, useRef, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./charList.scss\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport setContent from \"../../utils/setContent\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { getAllCharacters, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // window.addEventListener('scroll',  onScrollLoading);\r\n        // return () => {\r\n        //     window.removeEventListener('scroll', onScrollLoading);\r\n        // };\r\n    }, []);\r\n\r\n    const onScrollLoading = () => {\r\n        if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 1) {\r\n            onRequest(offset);\r\n        }\r\n    }\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('loaded'));\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList((charList) => [...charList, ...newCharList]);\r\n        setOffset((offset) => offset + 9);\r\n        setNewItemLoading(false);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const cardRefs = useRef([]);\r\n\r\n    const onCardFocus = (i, id, e) => {\r\n        if (e.code === \"Enter\" || e.code === \" \") {\r\n            props.onCharSelected(id);\r\n            //через рефы и перебор\r\n            // this.cardRefs.forEach(el => {\r\n            //     el.classList.remove('char__card-active');\r\n            // });\r\n            // this.cardRefs[i].classList.add('char__card-active');\r\n            // this.cardRefs[i].focus();\r\n        }\r\n\r\n        if (e.target.closest('.char__grid')) {\r\n            switch (e.code) {\r\n                case 'ArrowLeft':\r\n                    if (i - 1 < 0) {\r\n                        cardRefs.current[cardRefs.current.length - 1].focus();\r\n                    } else {\r\n                        cardRefs.current[i - 1].focus();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (i + 1 >= cardRefs.current.length) {\r\n                        cardRefs.current[0].focus();\r\n                    } else {\r\n                        cardRefs.current[i + 1].focus();\r\n                    }\r\n                    break;\r\n                default: { }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const renderCard = (charList) => {\r\n        let chars = charList.map((char, i) => {\r\n            const { thumbnail, name, id } = char;\r\n            let objectFit = 'cover';\r\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                objectFit = 'unset';\r\n            }\r\n            const selected = id === props.selectedCharId ? \"char__card-active\" : null;\r\n\r\n            return (\r\n                <CSSTransition\r\n                    key={id}\r\n                    classNames=\"char__card\"\r\n                    timeout={500}\r\n                >\r\n                    <li key={id}\r\n                        onClick={() => {\r\n                            props.onCharSelected(id);\r\n                        }}\r\n                        className={`char__card ${selected}`}\r\n                        ref={(el) => cardRefs.current[i] = el}\r\n                        tabIndex={0}\r\n                        onKeyDown={(e) => {\r\n                            onCardFocus(i, id, e);\r\n                        }}>\r\n                        <img src={thumbnail} alt={name} className=\"char__img\" style={{ objectFit: objectFit }} />\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {chars}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => setContent({ process, Component: () => renderCard(charList), LoadingComponent: newItemLoading ? () => renderCard(charList) : Spinner}),[process]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button\r\n                className=\"button button__long button__main\"\r\n                disabled={newItemLoading}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">LOAD MORE</div>\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func\r\n}\r\n\r\nexport default CharList;","import \"./selectChar.scss\";\r\n\r\nconst SelectChar = () => {\r\n\r\n    return (\r\n        <>\r\n            <p className=\"selectChar__title\">Please select a character to see information</p>\r\n            <div className=\"selectChar__top\">\r\n                <div className=\"selectChar__circle\"></div>\r\n                <div className=\"selectChar__mini\"></div>\r\n            </div>\r\n            \r\n            <div className=\"selectChar__block\"></div>\r\n            <div className=\"selectChar__block\"></div>\r\n            <div className=\"selectChar__block\"></div>\r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default SelectChar;","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./charInfo.scss\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\nimport SelectChar from \"../selectChar/SelectChar\";\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) return;\r\n\r\n        clearError();\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('loaded'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent({ process, Component: View, data: char, WaitingComponent: SelectChar, LoadingComponent: \"spinner\" })}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n    const comicsListHandler = (comics) => {\r\n        const maxList = 10;\r\n        let comicsRes = comics.map((item, i) => {\r\n            return <li key={i} className=\"char__comics-item\">{item.name}</li>;\r\n        });\r\n        comicsRes = comicsRes.filter(item => item.key < maxList);\r\n        return comicsRes.length > 0 ? comicsRes : \"No comics\";\r\n    };\r\n    let objectFit = 'cover';\r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n        objectFit = 'unset';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={{ objectFit: objectFit }} />\r\n                <div>\r\n                    <div className=\"char__name\">{name}</div>\r\n                    <div className=\"char__buttons\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">HOMEPAGE</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">WIKI</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                <p>\r\n                    {description}\r\n                </p>\r\n            </div>\r\n            <div className=\"char__comics\">\r\n                <div className=\"char__comics-title\">\r\n                    Comics:\r\n                </div>\r\n                <ul className=\"char__comics-list\">\r\n                    {comicsListHandler(comics)}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import \"./findCharacter.scss\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst FindCharacter = () => {\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    const onRequest = (name) => {\r\n        clearError();\r\n        if (!name) return;\r\n        getCharacterByName(name)\r\n            .then(onCharacterLoaded)\r\n            .then(() => setProcess('loaded'));\r\n    }\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        setCharacter(character);\r\n    }\r\n\r\n    const content = !character ? null : character.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {character[0].name} page?</div>\r\n            <Link to={`character/${character[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    onRequest(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {setContent({ process, Component: () => content })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FindCharacter;","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport FindCharacter from \"../findCharacter/FindCharacter\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\" />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__wrapper\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} selectedCharId={selectedChar} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <FindCharacter />\r\n                    </ErrorBoundary>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            setLoading(false);\r\n            return await response.json();\r\n        } catch (e) {\r\n            setProcess(\"error\");\r\n            setError(e.message);\r\n            setLoading(false);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('waiting');\r\n    }, []);\r\n\r\n    return {\r\n        loading,\r\n        request,\r\n        error,\r\n        clearError,\r\n        process,\r\n        setProcess\r\n    }\r\n}\r\n\r\nexport default useHttp;\r\n","import useHttp from \"../components/hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = \"apikey=d24cd74b8f784e74321942586e80d036\";\r\n    const _apiCharOffset = 0;\r\n    const { loading, request, error, clearError, setProcess, process } = useHttp();\r\n\r\n    const getAllCharacters = async (charOffset = _apiCharOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${charOffset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        let res = await request(`${_apiBase}/characters/${id}?${_apiKey}`);\r\n        return _transformCharacterData(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (ComicsOffset = 0) => {\r\n        let res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${ComicsOffset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}/characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const _transformCharacterData = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'Data about character is not found',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        request,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComics,\r\n        getCharacterByName,\r\n        setProcess,\r\n        process\r\n    }\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","style","display","width","height","objectFit","margin","src","img","alt","View","_ref2","char","thumbnail","name","description","homepage","wiki","_jsxs","className","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","onCharLoaded","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","Math","floor","random","then","stop","errorMessage","spinner","Spinner","content","onClick","mjolnir","process","data","WaitingComponent","_ref$waitingData","waitingData","LoadingComponent","Error","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","setCharEnded","getAllCharacters","setProcess","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","cardRefs","useRef","renderCard","chars","map","i","selected","selectedCharId","CSSTransition","classNames","timeout","onCharSelected","ref","el","current","tabIndex","onKeyDown","e","code","target","closest","focus","onCardFocus","TransitionGroup","component","elements","useMemo","setContent","disabled","_Fragment","comics","comicsRes","item","filter","comicsListHandler","charId","SelectChar","getCharacterByName","character","setCharacter","onCharacterLoaded","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","setSelectedChar","Helmet","RandomChar","CharList","CharInfo","FindCharacter","setLoading","setError","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","status","json","abrupt","t0","message","_x","_apiBase","_apiKey","_useHttp","useHttp","charOffset","res","results","_transformCharacterData","_callee2","_context2","getAllComics","_ref3","_callee3","ComicsOffset","_args3","_context3","_transformComics","getComics","_ref4","_callee4","_context4","_x2","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}